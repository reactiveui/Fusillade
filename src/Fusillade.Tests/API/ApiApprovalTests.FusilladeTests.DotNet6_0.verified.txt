[assembly: System.Runtime.Versioning.TargetFramework(".NETCoreApp,Version=v6.0", FrameworkDisplayName="")]
namespace Fusillade
{
    public interface IRequestCache
    {
        System.Threading.Tasks.Task<byte[]> Fetch(System.Net.Http.HttpRequestMessage request, string key, System.Threading.CancellationToken ct);
        System.Threading.Tasks.Task Save(System.Net.Http.HttpRequestMessage request, System.Net.Http.HttpResponseMessage response, string key, System.Threading.CancellationToken ct);
    }
    public abstract class LimitingHttpMessageHandler : System.Net.Http.DelegatingHandler
    {
        public LimitingHttpMessageHandler() { }
        public LimitingHttpMessageHandler(System.Net.Http.HttpMessageHandler innerHandler) { }
        public abstract void ResetLimit(long? maxBytesToRead = default);
    }
    public static class NetCache
    {
        public static System.Net.Http.HttpMessageHandler Background { get; set; }
        public static System.Net.Http.HttpMessageHandler Offline { get; set; }
        public static Punchclock.OperationQueue OperationQueue { get; set; }
        public static Fusillade.IRequestCache? RequestCache { get; set; }
        public static Fusillade.LimitingHttpMessageHandler Speculative { get; set; }
        public static System.Net.Http.HttpMessageHandler UserInitiated { get; set; }
    }
    public class OfflineHttpMessageHandler : System.Net.Http.HttpMessageHandler
    {
        public OfflineHttpMessageHandler(System.Func<System.Net.Http.HttpRequestMessage, string, System.Threading.CancellationToken, System.Threading.Tasks.Task<byte[]>>? retrieveBodyFunc) { }
        protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { }
    }
    public enum Priority
    {
        Speculative = 10,
        UserInitiated = 100,
        Background = 20,
        Explicit = 0,
    }
    public class RateLimitedHttpMessageHandler : Fusillade.LimitingHttpMessageHandler
    {
        public RateLimitedHttpMessageHandler(System.Net.Http.HttpMessageHandler handler, Fusillade.Priority basePriority, int priority = 0, long? maxBytesToRead = default, Punchclock.OperationQueue? opQueue = null, System.Func<System.Net.Http.HttpRequestMessage, System.Net.Http.HttpResponseMessage, string, System.Threading.CancellationToken, System.Threading.Tasks.Task>? cacheResultFunc = null) { }
        public override void ResetLimit(long? maxBytesToRead = default) { }
        protected override System.Threading.Tasks.Task<System.Net.Http.HttpResponseMessage> SendAsync(System.Net.Http.HttpRequestMessage request, System.Threading.CancellationToken cancellationToken) { }
        public static string UniqueKeyForRequest(System.Net.Http.HttpRequestMessage request) { }
    }
}